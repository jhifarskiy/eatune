// clean-db-names.js
require('dotenv').config();
const { MongoClient } = require('mongodb');

const MONGO_URI_TEMPLATE = 'mongodb+srv://jhifarskiy:<–ü–ê–†–û–õ–¨>@eatune.8vrsmid.mongodb.net/eatune?retryWrites=true&w=majority';
const DB_NAME = 'eatune';
const COLLECTION_NAME = 'tracks';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –º—É—Å–æ—Ä–∞
function cleanName(rawName) {
    if (!rawName) return '';
    // –£–¥–∞–ª—è–µ–º (Sefon.Pro), (Sefon.me), —Ç–µ–∫—Å—Ç –≤ –¥—Ä—É–≥–∏—Ö —Å–∫–æ–±–∫–∞—Ö, –∏ —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ
    return rawName
        .replace(/\s*\(Sefon\.(Pro|me)\)\s*/gi, '')
        .replace(/\s*\(.*?\)|\[.*?\]/g, '')
        .replace(/^\d+\.\s*/, '')
        .trim();
}

async function cleanDatabaseNames() {
    if (!process.env.MONGO_PASSWORD) {
        console.error('‚ùå –û—à–∏–±–∫–∞: –ü–∞—Ä–æ–ª—å –æ—Ç MongoDB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.');
        return;
    }

    const MONGO_URL = MONGO_URI_TEMPLATE.replace('<–ü–ê–†–û–õ–¨>', process.env.MONGO_PASSWORD);
    const client = new MongoClient(MONGO_URL);

    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ MongoDB –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π...');

    try {
        await client.connect();
        const db = client.db(DB_NAME);
        const collection = db.collection(COLLECTION_NAME);

        const tracks = await collection.find({}).toArray();
        console.log(`üîé –ù–∞–π–¥–µ–Ω–æ ${tracks.length} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`);

        let updatedCount = 0;

        for (const track of tracks) {
            const newTitle = cleanName(track.title);
            const newArtist = cleanName(track.artist);

            // –û–±–Ω–æ–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (newTitle !== track.title || newArtist !== track.artist) {
                updatedCount++;
                console.log(`\n–û–±–Ω–æ–≤–ª—è—é —Ç—Ä–µ–∫ ID: ${track._id}`);
                console.log(`   –ê—Ä—Ç–∏—Å—Ç: "${track.artist}" -> "${newArtist}"`);
                console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: "${track.title}" -> "${newTitle}"`);
                
                await collection.updateOne(
                    { _id: track._id },
                    { $set: { title: newTitle, artist: newArtist } }
                );
            }
        }
        
        console.log(`\n‚úÖ –ì–æ—Ç–æ–≤–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π: ${updatedCount} –∏–∑ ${tracks.length}.`);

    } catch (error) {
        console.error('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
    } finally {
        await client.close();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ.');
    }
}

cleanDatabaseNames();