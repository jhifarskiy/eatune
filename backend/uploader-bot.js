// uploader-bot.js

const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');
const chokidar = require('chokidar');
const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const WATCH_FOLDER = './tracks-to-upload';
const UPLOADED_FOLDER = path.join(WATCH_FOLDER, 'uploaded');

const B2_CONFIG = {
    endpoint: 'https://s3.us-west-004.backblazeb2.com',
    region: 'us-west-004',
    credentials: {
        accessKeyId: process.env.B2_ACCESS_KEY_ID,
        secretAccessKey: process.env.B2_SECRET_ACCESS_KEY,
    }
};
const BUCKET_NAME = 'Eatune';

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π ---
if (!B2_CONFIG.credentials.accessKeyId || !B2_CONFIG.credentials.secretAccessKey || !process.env.MONGO_PASSWORD) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –æ—Ç MongoDB –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.');
    console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.error('B2_ACCESS_KEY_ID="..." B2_SECRET_ACCESS_KEY="..." MONGO_PASSWORD="..." node uploader-bot.js');
    process.exit(1);
}

const s3Client = new S3Client(B2_CONFIG);

const runDbSync = () => {
    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (balanced-sync.js)...');
    
    const command = `MONGO_PASSWORD="${process.env.MONGO_PASSWORD}" node scripts/balanced-sync.js`;

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ë–î: ${error.message}`);
            return;
        }
        if (stderr) {
            console.error(` stderr –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${stderr}`);
        }
        console.log(`üì° stdout —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n${stdout}`);
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    });
};

const uploadFile = async (filePath) => {
    // –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è B2, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    // path.relative —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ö–∏—Ç—ã/2023/—Ç—Ä–µ–∫.mp3"
    // .replace(/\\/g, '/') –∑–∞–º–µ–Ω—è–µ—Ç –±—ç–∫—Å–ª—ç—à–∏ (–¥–ª—è Windows) –Ω–∞ —Å–ª—ç—à–∏, –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ –≤ S3
    const s3Key = path.relative(WATCH_FOLDER, filePath).replace(/\\/g, '/');

    console.log(`\n‚è≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: ${filePath}. –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...`);
    console.log(`   -> –ö–ª—é—á –≤ –±–∞–∫–µ—Ç–µ –±—É–¥–µ—Ç: ${s3Key}`);

    try {
        const fileContent = await fs.readFile(filePath);
        const uploadParams = {
            Bucket: BUCKET_NAME,
            Key: s3Key, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–∞–ø–æ–∫
            Body: fileContent,
        };

        await s3Client.send(new PutObjectCommand(uploadParams));
        console.log(`‚úÖ –§–∞–π–ª "${s3Key}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∫–µ—Ç "${BUCKET_NAME}".`);

        // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –≤ 'uploaded'
        const newPath = path.join(UPLOADED_FOLDER, s3Key);
        await fs.mkdir(path.dirname(newPath), { recursive: true });
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
        await fs.rename(filePath, newPath);
        console.log(`‚û°Ô∏è –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤: ${newPath}`);

        runDbSync();

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ "${filePath}":`, err);
    }
};

const startBot = async () => {
    await fs.mkdir(WATCH_FOLDER, { recursive: true });
    await fs.mkdir(UPLOADED_FOLDER, { recursive: true });

    console.log(`ü§ñ –ë–æ—Ç-–∑–∞–≥—Ä—É–∑—á–∏–∫ –∑–∞–ø—É—â–µ–Ω.`);
    console.log(`üìÇ –°–ª–µ–∂—É –∑–∞ –ø–∞–ø–∫–æ–π: ${path.resolve(WATCH_FOLDER)} (–≤–∫–ª—é—á–∞—è –≤—Å–µ –ø–æ–¥–ø–∞–ø–∫–∏)`);

    // –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –£–±–∏—Ä–∞–µ–º `depth: 0`, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ñ–∞–π–ª–∞–º–∏ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
    const watcher = chokidar.watch(WATCH_FOLDER, {
        ignored: [/(^|[\/\\])\../, UPLOADED_FOLDER],
        persistent: true,
        ignoreInitial: true,
    });

    watcher.on('add', (filePath) => {
        setTimeout(() => uploadFile(filePath), 1000);
    });

    watcher.on('error', (error) => console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: ${error}`));
};

startBot();