// uploader-bot.js

const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');
const chokidar = require('chokidar');
const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const WATCH_FOLDER = './tracks-to-upload';
const UPLOADED_FOLDER = path.join(WATCH_FOLDER, 'uploaded');
// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
const CONCURRENCY_LIMIT = 10;

const R2_CONFIG = {
    endpoint: 'https://e51a1f68ce64b0c69f6588f1e885c3ff.r2.cloudflarestorage.com',
    region: 'auto',
    credentials: {
        accessKeyId: process.env.R2_ACCESS_KEY_ID,
        secretAccessKey: process.env.R2_SECRET_ACCESS_KEY,
    }
};
const BUCKET_NAME = 'eatune';

if (!R2_CONFIG.credentials.accessKeyId || !R2_CONFIG.credentials.secretAccessKey || !process.env.MONGO_PASSWORD) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ R2 –∏–ª–∏ –ø–∞—Ä–æ–ª—å –æ—Ç MongoDB –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.');
    process.exit(1);
}

const s3Client = new S3Client(R2_CONFIG);

const runDbSync = () => {
    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (smart-sync.js)...');
    
    const command = `R2_ACCESS_KEY_ID="${process.env.R2_ACCESS_KEY_ID}" R2_SECRET_ACCESS_KEY="${process.env.R2_SECRET_ACCESS_KEY}" MONGO_PASSWORD="${process.env.MONGO_PASSWORD}" node scripts/smart-sync.js`;

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ë–î: ${error.message}`);
            return;
        }
        if (stderr) {
            console.error(` stderr –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${stderr}`);
        }
        console.log(`üì° stdout —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n${stdout}`);
        console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    });
};

const uploadFile = async (filePath) => {
    const s3Key = path.relative(WATCH_FOLDER, filePath).replace(/\\/g, '/');

    console.log(`  -> üì§ –ó–∞–≥—Ä—É–∂–∞—é: ${path.basename(filePath)}`);

    try {
        const fileContent = await fs.readFile(filePath);
        const uploadParams = {
            Bucket: BUCKET_NAME,
            Key: s3Key,
            Body: fileContent,
        };

        await s3Client.send(new PutObjectCommand(uploadParams));
        
        const newPath = path.join(UPLOADED_FOLDER, s3Key);
        await fs.mkdir(path.dirname(newPath), { recursive: true });
        
        await fs.rename(filePath, newPath);
        // console.log(`  -> ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω: ${s3Key}`);
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ "${filePath}":`, err);
    }
};

const startBot = async () => {
    await fs.mkdir(WATCH_FOLDER, { recursive: true });
    await fs.mkdir(UPLOADED_FOLDER, { recursive: true });

    console.log(`ü§ñ –ë–æ—Ç-–∑–∞–≥—Ä—É–∑—á–∏–∫ –∑–∞–ø—É—â–µ–Ω.`);
    console.log(`üìÇ –°–∫–∞–Ω–∏—Ä—É—é –ø–∞–ø–∫—É: ${path.resolve(WATCH_FOLDER)}...`);

    // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–∞—á–∫–∞–º–∏
    const fileQueue = [];
    const watcher = chokidar.watch(WATCH_FOLDER, {
        ignored: [/(^|[\/\\])\../, UPLOADED_FOLDER],
        persistent: false, // –ë–æ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
        ignoreInitial: false, 
    });

    watcher.on('add', (filePath) => {
        // –ü—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –æ—á–µ—Ä–µ–¥—å
        fileQueue.push(filePath);
    });

    watcher.on('ready', async () => {
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${fileQueue.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.`);
        console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –ø–∞—á–∫–∞–º–∏ –ø–æ ${CONCURRENCY_LIMIT} —Ñ–∞–π–ª–æ–≤.`);

        for (let i = 0; i < fileQueue.length; i += CONCURRENCY_LIMIT) {
            const chunk = fileQueue.slice(i, i + CONCURRENCY_LIMIT);
            console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—á–∫–∏ ${Math.floor(i / CONCURRENCY_LIMIT) + 1} –∏–∑ ${Math.ceil(fileQueue.length / CONCURRENCY_LIMIT)} ---`);
            
            const uploadPromises = chunk.map(filePath => uploadFile(filePath));
            await Promise.all(uploadPromises);
            
            console.log(`--- ‚úÖ –ü–∞—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---`);
        }
        
        console.log('\n\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
        runDbSync();
    });

    watcher.on('error', (error) => console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: ${error}`));
};

startBot();