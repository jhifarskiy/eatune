const { S3Client, ListObjectVersionsCommand } = require('@aws-sdk/client-s3');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const B2_CONFIG = {
    endpoint: 'https://s3.us-west-004.backblazeb2.com',
    region: 'us-west-004',
    credentials: {
        accessKeyId: process.env.B2_ACCESS_KEY_ID,
        secretAccessKey: process.env.B2_SECRET_ACCESS_KEY,
    }
};
const BUCKET_NAME = 'Eatune';

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π ---
if (!B2_CONFIG.credentials.accessKeyId || !B2_CONFIG.credentials.secretAccessKey) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ Backblaze B2 –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.');
    console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.error('B2_ACCESS_KEY_ID="–í–ê–®_–ö–õ–Æ–ß" B2_SECRET_ACCESS_KEY="–í–ê–®_–°–ï–ö–†–ï–¢" node check-storage.js');
    process.exit(1);
}

const s3Client = new S3Client(B2_CONFIG);

function formatBytes(bytes, decimals = 2) {
    if (!+bytes) return '0 Bytes';
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
}

const checkStorage = async () => {
    console.log(`üîé –ü—Ä–æ–≤–µ—Ä—è—é —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –±–∞–∫–µ—Ç–µ "${BUCKET_NAME}" (–≤–∫–ª—é—á–∞—è –≤—Å–µ –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–æ–≤)...`);
    let totalSizeBytes = 0;
    let totalObjects = 0; // –í–∫–ª—é—á–∞—è –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –∏ –º–∞—Ä–∫–µ—Ä—ã —É–¥–∞–ª–µ–Ω–∏—è
    let keyMarker;
    let versionIdMarker;
    let isTruncated = true;

    try {
        while (isTruncated) {
            const params = {
                Bucket: BUCKET_NAME,
                KeyMarker: keyMarker,
                VersionIdMarker: versionIdMarker,
            };
            
            // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É ListObjectVersionsCommand
            const response = await s3Client.send(new ListObjectVersionsCommand(params));
            
            // –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π —Ñ–∞–π–ª–æ–≤
            if (response.Versions) {
                for (const item of response.Versions) {
                    totalSizeBytes += item.Size;
                    totalObjects++;
                }
            }
            // –ú–∞—Ä–∫–µ—Ä—ã —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∂–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–∞–º–∏, –Ω–æ –∏—Ö —Ä–∞–∑–º–µ—Ä 0
            if (response.DeleteMarkers) {
                totalObjects += response.DeleteMarkers.length;
            }
            
            isTruncated = response.IsTruncated;
            keyMarker = response.NextKeyMarker;
            versionIdMarker = response.NextVersionIdMarker;
        }

        console.log('\n--- üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ö—Ä–∞–Ω–∏–ª–∏—â—É (–≤—Å–µ –≤–µ—Ä—Å–∏–∏) ---');
        console.log(`üìÅ –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ (–≤–µ—Ä—Å–∏–π –∏ –º–∞—Ä–∫–µ—Ä–æ–≤): ${totalObjects}`);
        console.log(`üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${formatBytes(totalSizeBytes)}`);
        console.log(`   - –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö: ${(totalSizeBytes / 1024 / 1024).toFixed(2)} MB`);
        console.log(`   - –≤ –≥–∏–≥–∞–±–∞–π—Ç–∞—Ö: ${(totalSizeBytes / 1024 / 1024 / 1024).toFixed(3)} GB`);
        console.log('--------------------------------------------------\n');
        console.log('üí° –°–æ–≤–µ—Ç: –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Lifecycle Rules –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∫–µ—Ç–æ–º –Ω–∞ —Å–∞–π—Ç–µ Backblaze.');


    } catch (err) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:", err);
    }
};

checkStorage();