// reset-covers.js
require('dotenv').config();
const { MongoClient } = require('mongodb');

const MONGO_URI_TEMPLATE = 'mongodb+srv://jhifarskiy:<–ü–ê–†–û–õ–¨>@eatune.8vrsmid.mongodb.net/eatune?retryWrites=true&w=majority';
const DB_NAME = 'eatune';
const COLLECTION_NAME = 'tracks';

async function resetCovers() {
  if (!process.env.MONGO_PASSWORD) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ü–∞—Ä–æ–ª—å –æ—Ç MongoDB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.');
    return;
  }

  const MONGO_URL = MONGO_URI_TEMPLATE.replace('<–ü–ê–†–û–õ–¨>', process.env.MONGO_PASSWORD);
  const client = new MongoClient(MONGO_URL);

  console.log('üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ MongoDB –¥–ª—è —Å–±—Ä–æ—Å–∞ –æ–±–ª–æ–∂–µ–∫...');

  try {
    await client.connect();
    const db = client.db(DB_NAME);
    const collection = db.collection(COLLECTION_NAME);

    const result = await collection.updateMany(
      { "coverUrl": "not_found" },
      { "$set": { "coverUrl": null } }
    );

    console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ. –°–±—Ä–æ—à–µ–Ω–æ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${result.modifiedCount}.`);

  } catch (error) {
    console.error('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –æ–±–ª–æ–∂–µ–∫:', error);
  } finally {
    await client.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –¥–ª—è —Å–±—Ä–æ—Å–∞ –∑–∞–∫—Ä—ã—Ç–æ.');
  }
}

resetCovers();